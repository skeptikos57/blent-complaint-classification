"""Script de pr√©diction du sentiment pour un commentaire de film.

Ce script :
1. Charge les mod√®les pr√©-entra√Æn√©s (RNN et Word2Vec)
2. Prend un commentaire en entr√©e via la ligne de commande
3. Transforme le commentaire en vecteurs num√©riques
4. Pr√©dit le sentiment (positif/neutre/n√©gatif) avec un niveau de confiance

Usage:
    python predict.py "Votre commentaire sur le film ici"
"""

import os
import sys  # Pour r√©cup√©rer les arguments de ligne de commande

# Configuration pour r√©duire les messages de TensorFlow
# IMPORTANT : Ces lignes DOIVENT √™tre avant l'import de TensorFlow
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"  # 3 = Afficher seulement les erreurs
os.environ["TF_ENABLE_ONEDNN_OPTS"] = "0"  # D√©sactive les optimisations oneDNN

# Imports des biblioth√®ques n√©cessaires
import numpy as np  # Pour les calculs num√©riques et tableaux
import tensorflow as tf  # Pour charger et utiliser le mod√®le de deep learning
from gensim.models import KeyedVectors  # Pour charger le mod√®le Word2Vec sauvegard√©
from spacy.lang.fr import French  # Pour analyser et d√©couper le texte en fran√ßais
from dotenv import load_dotenv  # Pour charger les variables d'environnement
import json  # Pour charger le mapping des classes

# Configuration suppl√©mentaire pour r√©duire les messages de TensorFlow
tf.get_logger().setLevel('ERROR')  # Ne montre que les erreurs, pas les warnings

def load_models():
    """Charge les mod√®les pr√©-entra√Æn√©s n√©cessaires pour la pr√©diction.
    
    Cette fonction charge :
    - Le mod√®le RNN : le r√©seau de neurones qui fait la pr√©diction
    - Le mod√®le Word2Vec : pour convertir les mots en vecteurs num√©riques
    - Le tokenizer Spacy : pour d√©couper le texte en mots
    
    Returns:
        Tuple contenant (mod√®le_rnn, mod√®le_word2vec, tokenizer_spacy)
    """
    # Charge le mod√®le de deep learning sauvegard√© apr√®s l'entra√Ænement
    # Utiliser la variable d'environnement pour le nom du fichier
    output_file = os.getenv('OUTPUT_FILE', 'complaint_classifier')
    model_path = f"models/{output_file}.keras"
    rnn = tf.keras.models.load_model(model_path)
    print(f"‚úÖ Mod√®le RNN charg√© depuis {model_path}")
    
    # Charge le vocabulaire Word2Vec (les vecteurs de tous les mots appris)
    w2v = KeyedVectors.load("models/w2v.wv")
    print("‚úÖ Mod√®le Word2Vec charg√© depuis models/w2v.wv")
    
    # Initialise l'analyseur de texte fran√ßais
    nlp = French()
    
    return rnn, w2v, nlp

def process_comment(comment, w2v, nlp, W2V_SIZE, MAX_LENGTH):
    """Transforme un commentaire texte en matrice de vecteurs Word2Vec.
    
    Cette fonction fait exactement la m√™me transformation que pendant
    l'entra√Ænement pour que le mod√®le comprenne le nouveau commentaire.
    
    Args:
        comment: Le texte du commentaire √† analyser
        w2v: Mod√®le Word2Vec pour convertir les mots en vecteurs
        nlp: Tokenizer Spacy pour d√©couper le texte
        W2V_SIZE: Taille des vecteurs Word2Vec (100)
        MAX_LENGTH: Nombre maximum de mots √† consid√©rer (64)
    
    Returns:
        Matrice numpy de forme (100, 64) repr√©sentant le commentaire
    """
    # Met le texte en minuscules pour uniformiser
    comment = comment.lower()
    
    # D√©coupe le texte en mots et enl√®ve la ponctuation
    tokens = [x.text for x in nlp(comment) if not x.is_punct]
    
    # Cr√©e une matrice vide (100 lignes x 64 colonnes) remplie de z√©ros
    row = np.zeros((W2V_SIZE, MAX_LENGTH))
    
    # Remplit la matrice avec les vecteurs de chaque mot
    for j in range(min(MAX_LENGTH, len(tokens))):
        try:
            # Place le vecteur du mot j dans la colonne j
            row[:, j] = w2v[tokens[j]]
        except KeyError:
            # Si le mot n'a pas √©t√© vu pendant l'entra√Ænement, on laisse des z√©ros
            print(f"Le mot '{tokens[j]}' ne fait pas partie du vocabulaire.")
    
    return row

def predict(comment, rnn, w2v, nlp, W2V_SIZE, MAX_LENGTH):
    """Pr√©dit le sentiment d'un commentaire et retourne les r√©sultats.
    
    Processus de pr√©diction :
    1. Transforme le texte en matrice de vecteurs
    2. Fait passer cette matrice dans le r√©seau de neurones
    3. R√©cup√®re les probabilit√©s pour chaque sentiment
    4. Choisit le sentiment avec la plus haute probabilit√©
    
    Args:
        comment: Texte du commentaire √† analyser
        rnn: Mod√®le de r√©seau de neurones entra√Æn√©
        w2v: Mod√®le Word2Vec
        nlp: Tokenizer Spacy
        W2V_SIZE: Dimension des vecteurs (100)
        MAX_LENGTH: Longueur max (64)
    
    Returns:
        Tuple contenant:
        - Le sentiment pr√©dit ('N√©gatif', 'Neutre' ou 'Positif')
        - Le niveau de confiance en pourcentage
        - Les probabilit√©s d√©taill√©es pour chaque cat√©gorie
    """
    # Transforme le commentaire en matrice num√©rique
    processed_comment = process_comment(comment, w2v, nlp, W2V_SIZE, MAX_LENGTH)
    
    # Fait la pr√©diction avec le mod√®le
    # np.asarray([...]) ajoute une dimension car le mod√®le attend un batch
    # verbose=0 pour ne pas afficher de messages pendant la pr√©diction
    prediction = rnn.predict(np.asarray([processed_comment]), verbose=0)
    
    # Interpr√©tation des r√©sultats
    # Le mod√®le retourne 3 probabilit√©s (une pour chaque sentiment)
    sentiment_labels = ['N√©gatif', 'Neutre', 'Positif']
    
    # argmax trouve l'indice de la plus haute probabilit√©
    predicted_class = np.argmax(prediction[0])
    
    # Convertit la probabilit√© en pourcentage
    confidence = prediction[0][predicted_class] * 100
    
    return sentiment_labels[predicted_class], confidence, prediction[0]


def main():
    """Fonction principale qui orchestre la pr√©diction.
    
    √âtapes :
    1. Charge les mod√®les sauvegard√©s
    2. R√©cup√®re le commentaire depuis la ligne de commande
    3. Fait la pr√©diction
    4. Affiche les r√©sultats de fa√ßon claire
    """
    # √âTAPE 1 : Chargement des mod√®les
    # Charge le RNN, Word2Vec et le tokenizer
    rnn, w2v, nlp = load_models()
    
    # √âTAPE 2 : R√©cup√©ration du commentaire
    # V√©rifie qu'un commentaire a √©t√© fourni en argument
    if len(sys.argv) < 2:
        print("Usage: python predict.py \"votre commentaire ici\"")
        print("Exemple: python predict.py \"Ce film √©tait vraiment excellent !\"")
        sys.exit(1)  # Quitte le programme avec un code d'erreur
    
    # Joint tous les arguments pour former le commentaire complet
    # (au cas o√π il y aurait des espaces dans le commentaire)
    comment = " ".join(sys.argv[1:])
    
    # √âTAPE 3 : Pr√©diction
    # Analyse le commentaire et pr√©dit le sentiment
    sentiment, confidence, probabilities = predict(comment, rnn, w2v, nlp, W2V_SIZE, MAX_LENGTH)
    
    # √âTAPE 4 : Affichage des r√©sultats
    print(f"\nüìä Analyse du commentaire:")
    print(f"Commentaire: \"{comment}\"")
    
    # Affiche le sentiment principal et la confiance
    print(f"Sentiment pr√©dit: {sentiment} (confiance: {confidence:.1f}%)")
    
    # Affiche les probabilit√©s d√©taill√©es pour chaque cat√©gorie
    # Utile pour voir si le mod√®le h√©site entre plusieurs sentiments
    print(f"Probabilit√©s d√©taill√©es:")
    print(f"  - N√©gatif: {probabilities[0]*100:.1f}%")
    print(f"  - Neutre: {probabilities[1]*100:.1f}%")
    print(f"  - Positif: {probabilities[2]*100:.1f}%")

# Point d'entr√©e du script
# Ce code ne s'ex√©cute que si on lance directement ce fichier
# (pas si on l'importe dans un autre fichier)
if __name__ == "__main__":
    # Charge les variables d'environnement depuis le fichier .env
    # Cela permet de configurer les param√®tres sans modifier le code
    load_dotenv()
    
    # R√©cup√®re les param√®tres de configuration
    # Ces valeurs doivent √™tre identiques √† celles utilis√©es pour l'entra√Ænement
    W2V_SIZE = int(os.getenv("W2V_SIZE", 100))  # Taille des vecteurs Word2Vec
    W2V_MIN_COUNT = int(os.getenv("W2V_MIN_COUNT", 3))  # Fr√©quence min (pas utilis√© ici)
    MAX_LENGTH = int(os.getenv("MAX_LENGTH", 64))  # Nombre max de mots par commentaire
    
    # Lance la fonction principale
    main()